""" Set Space as the leader key
nnoremap <SPACE> <Nop>
let mapleader = " "

""" Set vim plugins
set hlsearch

set incsearch
set smartcase
set ignorecase
set showmode
set de=on
set scrolloff=5
set ideamarks
set easymotion
set surround
set argtextobj
set relativenumber
set number
set exchange
set highlightedyank
set textobj-entire
set NERDTree
set ReplaceWithRegister
set ideajoin
set idearefactormode=keep
set incsearch

""" Vim key mapping
nnoremap L $
vnoremap H ^
nnoremap H ^
vnoremap L $
inoremap jk <esc>
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-d> <Delete>

""" NERDTree
map <leader>d :NERDTree<CR>

""" Keep yanked content in register
vnoremap <leader>p "_dP

""" Easymotion
map <leader>f <Plug>(easymotion-s)
nnoremap <leader>sc :nohlsearch<CR>

""" MultiCursor
Plug 'terryma/vim-multiple-cursors'
map mc <A-n>
map mx <A-x>
map mp <A-p>

""" Navigation
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <TAB> :action PreviousTab<CR>
nnoremap <s-TAB> :action NextTab<CR>

""" Editing source code
vnoremap < <gv
vnoremap > >gv
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>
map [e <Action>(GotoPreviousError)
map ]e <Action>(GotoNextError)

nnoremap <leader>zc :action CollapseAllRegions<CR>
nnoremap <leader>zo :action ExpandAllRegions<CR>
nnoremap <leader>c :action CommentByLineComment<CR>

""" Code Formatting
nnoremap <Leader>= :action ReformatCode<CR>
nnoremap <leader>o :action OptimizeImports<CR>

""" Code Completion
imap <C-o> <Action>(EditorCompleteStatement)
imap <C-i> <Action>(EditorLineEnd)

""" LSP
map gD <Action>(GotoTypeDeclaration)
map gd <Action>(GotoDeclaration)
map gi <Action>(GotoImplementation)
map gr <Action>(GotoDeclaration)
map <leader>rn <Action>(RenameElement)

""" Window Operation
map <leader>t <Action>(ActivateTerminalToolWindow)

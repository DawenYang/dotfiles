""" Set Space as the leader key
nnoremap <SPACE> <Nop>
let mapleader = " "

""" Set vim plugins
set hlsearch
set incsearch
set smartcase
set ignorecase
set showmode
set de=on
set scrolloff=5
set ideamarks
set relativenumber
set number
set idearefactormode=keep

""" Vim key mapping
nnoremap L $
vnoremap H ^
nnoremap H ^
vnoremap L $
inoremap jk <esc>
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-d> <Delete>

""" easymotion
" Additional installation for IdeaVim-EasyMotion and AceJump plugins.
Plug 'easymotion/vim-easymotion'

""" highlightedyank
Plug 'machakann/vim-highlightedyank'

""" NERDTree
Plug 'preservim/nerdtree'
" open project panel
map <leader>a :NERDTree<CR>
" ESC move control back to editor
" Control - J/K to navigate on directory level
" Shift - J/K to navigate inside a directory
" P to go to parent, Shift - P to go to project parent
" O to open directory, and Shift - O to open recursively
" GO to open file in editor but cursor stays inside Panel
" X to close directory
" Control-r rename file
" n new file
" N new directory
map <leader>qq <Action>(CloseContent)
map <leader>qa <Action>(CloseAllEditors)

""" Keep yanked content in register
vnoremap <leader>p "_dP

""" Easymotion
map <leader>f <Plug>(easymotion-s)
nnoremap <leader>sc :nohlsearch<CR>

""" MultiCursor
" mc start multicursor
" mc next match
" mx skip next match
" mp remove current match and go back to previous one
Plug 'terryma/vim-multiple-cursors'
map mc <A-n>
map mx <A-x>
map mp <A-p>

""" Surround Plugin
" Emulates vim-surround
" cs Change surroundings
" cst Change surroundings tag
" ds Delete surroundings
" dst Delete surroundings tag
" ys{motion}{surround} Add Surround
Plug 'tpope/vim-surround'

""" Commentary plugin
Plug 'tpope/vim-commentary'
" gcc add comments or undo

nmap <S-Down> :action EditorCloneCaretBelow<CR>
nmap <S-Up> :action EditorCloneCaretAbove<CR>

""" Tab Navigation
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <s-l> :action NextTab<CR>
nnoremap <s-h> :action PreviousTab<CR>
nnoremap sv :action SplitVertically<CR>
nnoremap sr :action MoveTabRight<CR>
nnoremap su :action Unsplit<CR>

""" Editing source code
vnoremap <s-TAB> <gv
vnoremap <TAB> >gv
inoremap <TAB> >gv
inoremap <s-TAB> <gv
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>
map [e <Action>(GotoPreviousError)
map ]e <Action>(GotoNextError)

nnoremap <leader>zc :action CollapseAllRegions<CR>
nnoremap <leader>zo :action ExpandAllRegions<CR>
nnoremap <leader>c :action CommentByLineComment<CR>

""" Editor Copy and Paste
map <C-c> <Action>(EditorCopy)
map <C-v> <Action>(EditorPaste)

""" Code Formatting
nnoremap <leader>= :action ReformatCode<CR>
nnoremap <leader>o :action OptimizeImports<CR>

""" Code Completion
imap <C-o> <Action>(EditorCompleteStatement)
imap <C-i> <Action>(EditorLineEnd)

""" Code block selection
" vi{ visual inner block is better than IDE code block selection

""" Code move
map <C-Down> <Action>(MoveStatementDown)
map <C-Up> <Action>(MoveStatementUp)

""" LSP
map gD <Action>(GotoTypeDeclaration)
map gd <Action>(GotoDeclaration)
map gi <Action>(GotoImplementation)
map <leader>rn <Action>(RenameElement)
" Shift-K is mapped to ShowHoverInfo

" leader code actions to trigger quick fixes
map <leader>ca <Action>(ShowIntentionActions)

""" Git Operations
nmap <leader>gc <action>(CheckinProject)
nmap <leader>ge <action>(Git.Commit.And.Push.Executor)
nmap <leader>gp <action>(GitPushBranchAction)
map <leader>gb <Action>(Git.Branches)

""" Window Operations
map <leader>wt <Action>(ActivateTerminalToolWindow)
map <leader>wg <Action>(ActivateVersionControlToolWindow)
" Shift Escape Hide Active Window

map <leader>rs <Action>(RestartIde)
